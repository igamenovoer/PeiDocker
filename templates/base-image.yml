version: '3'

x-build-cfg:
  # built image name and tag
  output_image_name: my_image
  output_image_tag: base

  # base image
  base_image: nvidia/cuda:12.3.2-base-ubuntu22.04

  apps:
    # install essential apps, by executing /installation/scripts/install-essential-apps.sh
    with_essential_apps: true

    # install additional apps, by executing /installation/custom-scripts/custom-install-apps.sh
    with_comstom_apps: true

  # ssh configurations
  ssh:
    with_ssh: true
    username: me
    password: 123456
    port : 22 # ssh port in container

    # ssh public key file, if not set, password will be used
    # if you want to use your own key, copy the key to /installation/ssh/keys/ and set the file name here, like this
    # pubkey_file: /installation/ssh/keys/mykey.rsa.pub
    pubkey_file: ''

  proxy:
    # proxy configurations, the proxy will be exposed in the container
    # and you can optionally use it for apt, shell, or custom scripts
    proxy_port: 7890
    proxy_address: host.docker.internal

    # deduced http proxy settings, you do not have to touch this
    _proxy_http: http://${.proxy_address}:${.proxy_port}
    _proxy_https: http://${.proxy_address}:${.proxy_port}

  # apt settings
  apt:
    # replace apt source file?
    source_file: /installation/apt/sources-tsinghua.list
    keep_source_file: true  # retain apt source file after build? If false, source file will be removed after build

    # use http proxy for apt? 
    use_proxy: false # use proxy for apt install ?
    keep_proxy: false # retain http proxy settings in apt after build? If false, proxy will be removed after build

# runtime configuration
x-run-cfg:
  ssh:
    host_port: 12222
  device: cpu  # can be gpu, cpu, mps
  environment: {}

x-sections:
  run-with-device:
    # use in deploy.resources.reservations.devices
    gpu:
      - driver: nvidia
        capabilities: [gpu]
    cpu:  []
    mps:  []

services:
  my_service:
    image: ${x-build-cfg.output_image_name}:${x-build-cfg.output_image_tag}

    # automatic start bash in ssh
    stdin_open: true
    tty: true
    command: /bin/bash

    # port mapping
    ports:
      - "${x-run-cfg.ssh.host_port}:${x-build-cfg.ssh.port}"

    # use gpu?
    deploy:
      resources:
        reservations:
          devices: ${x-sections.run-with-device[${x-run-cfg.device}]}

    # user provided environments
    environment: ${x-run-cfg.environment}

    build:
      context: .
      dockerfile: stage_base.Dockerfile

      # required to use proxy
      extra_hosts:
        - "host.docker.internal:host-gateway"

      args:
        BASE_IMAGE: ${x-build-cfg.base_image}

        # install essential apps, by executing /installation/scripts/install-essential-apps.sh
        WITH_ESSENTIAL_APPS: ${x-build-cfg.apps.with_essential_apps}

        # install additional apps, by executing /installation/custom-scripts/custom-install-apps.sh
        WITH_CUSTOM_APPS: ${x-build-cfg.apps.with_comstom_apps}

        # install openssh-server, and set up ssh user, password, public key (optional)
        WITH_SSH: ${x-build-cfg.ssh.with_ssh}
        SSH_USER_NAME: ${x-build-cfg.ssh.username} # default ssh user name
        SSH_USER_PASSWORD: ${x-build-cfg.ssh.password}  # default ssh user password
        SSH_PUBKEY_FILE: ${x-build-cfg.ssh.pubkey_file} # ssh public key file, if not set, password will be used

        # replace apt source file?
        APT_SOURCE_FILE: ${x-build-cfg.apt.source_file}
        KEEP_APT_SOURCE_FILE: ${x-build-cfg.apt.keep_source_file}  # retain apt source file after build? If false, source file will be removed after build
        APT_USE_PROXY: ${x-build-cfg.apt.use_proxy} # use proxy for apt install ?
        APT_KEEP_PROXY: ${x-build-cfg.apt.keep_proxy} # retain http proxy settings in apt after build? If false, proxy will be removed after build

        # given proxies
        USER_HTTP_PROXY: ${x-build-cfg.proxy._proxy_http}
        USER_HTTPS_PROXY: ${x-build-cfg.proxy._proxy_https}
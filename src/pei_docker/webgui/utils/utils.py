"""
Utility functions for PeiDocker Web GUI.

This module provides utility classes for project management and
integration with the existing PeiDocker CLI commands.
"""

import asyncio
from pathlib import Path
from typing import Optional
import yaml


class ProjectManager:
    """Manages PeiDocker project operations."""
    
    def __init__(self) -> None:
        self._cli_available: Optional[bool] = None
    
    async def check_cli_availability(self) -> bool:
        """Check if pei-docker-cli is available."""
        if self._cli_available is not None:
            return self._cli_available
        
        try:
            process = await asyncio.create_subprocess_exec(
                'pei-docker-cli', '--version',
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            self._cli_available = process.returncode == 0
            return self._cli_available
            
        except FileNotFoundError:
            self._cli_available = False
            return False
        except Exception:
            self._cli_available = False
            return False
    
    async def create_project(self, project_dir: Path) -> bool:
        """Create a new PeiDocker project using CLI or fallback."""
        try:
            # Check if directory exists and is empty
            if project_dir.exists():
                if any(project_dir.iterdir()):
                    raise ValueError(f"Directory {project_dir} is not empty")
            else:
                project_dir.mkdir(parents=True, exist_ok=True)
            
            # Check if CLI is available
            if await self.check_cli_availability():
                # Use CLI
                return await self._create_project_with_cli(project_dir)
            else:
                # Use fallback method
                return await self._create_project_fallback(project_dir)
                
        except Exception as e:
            print(f"Error creating project: {e}")
            return False
    
    async def _create_project_with_cli(self, project_dir: Path) -> bool:
        """Create project using pei-docker-cli."""
        try:
            cmd = ['pei-docker-cli', 'create', '-p', str(project_dir)]
            
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE,
                cwd=project_dir.parent
            )
            
            stdout, stderr = await process.communicate()
            
            if process.returncode == 0:
                return True
            else:
                print(f"CLI project creation failed: {stderr.decode()}")
                # Try fallback method
                return await self._create_project_fallback(project_dir)
                
        except Exception as e:
            print(f"Error with CLI project creation: {e}")
            # Try fallback method
            return await self._create_project_fallback(project_dir)
    
    async def _create_project_fallback(self, project_dir: Path) -> bool:
        """Create basic project structure without CLI."""
        try:
            # Create basic project structure
            project_dir.mkdir(parents=True, exist_ok=True)
            
            # Create basic user_config.yml
            config_file = project_dir / 'user_config.yml'
            basic_config = {
                'stage_1': {
                    'image': {
                        'base': 'ubuntu:22.04',
                        'output': f'{project_dir.name}:stage-1'
                    }
                },
                'stage_2': {
                    'image': {
                        'output': f'{project_dir.name}:stage-2'
                    }
                }
            }
            
            with open(config_file, 'w') as f:
                yaml.dump(basic_config, f, default_flow_style=False, sort_keys=False, indent=2)
            
            # Create basic directory structure
            (project_dir / 'stage-1' / 'custom').mkdir(parents=True, exist_ok=True)
            (project_dir / 'stage-2' / 'custom').mkdir(parents=True, exist_ok=True)
            (project_dir / 'installation').mkdir(parents=True, exist_ok=True)
            
            # Create placeholder Dockerfiles
            stage1_dockerfile = project_dir / 'stage-1.Dockerfile'
            stage1_dockerfile.write_text("# PeiDocker Stage-1 Dockerfile\n# This will be generated by pei-docker-cli configure\n")
            
            stage2_dockerfile = project_dir / 'stage-2.Dockerfile' 
            stage2_dockerfile.write_text("# PeiDocker Stage-2 Dockerfile\n# This will be generated by pei-docker-cli configure\n")
            
            return True
            
        except Exception as e:
            print(f"Error in fallback project creation: {e}")
            return False
    
    async def configure_project(self, project_dir: Path) -> bool:
        """Configure a PeiDocker project using CLI or fallback."""
        try:
            # Check if CLI is available
            if await self.check_cli_availability():
                return await self._configure_project_with_cli(project_dir)
            else:
                return await self._configure_project_fallback(project_dir)
                
        except Exception as e:
            print(f"Error configuring project: {e}")
            return False
    
    async def _configure_project_with_cli(self, project_dir: Path) -> bool:
        """Configure project using pei-docker-cli."""
        try:
            cmd = ['pei-docker-cli', 'configure', '-p', str(project_dir)]
            
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE,
                cwd=project_dir
            )
            
            stdout, stderr = await process.communicate()
            
            if process.returncode == 0:
                return True
            else:
                print(f"CLI project configuration failed: {stderr.decode()}")
                # Try fallback method
                return await self._configure_project_fallback(project_dir)
                
        except Exception as e:
            print(f"Error with CLI project configuration: {e}")
            # Try fallback method
            return await self._configure_project_fallback(project_dir)
    
    async def _configure_project_fallback(self, project_dir: Path) -> bool:
        """Configure project without CLI - basic validation and setup."""
        try:
            # Check if user_config.yml exists
            config_file = project_dir / 'user_config.yml'
            if not config_file.exists():
                print("No user_config.yml found - cannot configure project")
                return False
            
            # Validate the configuration file is valid YAML
            with open(config_file, 'r') as f:
                try:
                    yaml.safe_load(f)
                except yaml.YAMLError as e:
                    print(f"Invalid YAML in user_config.yml: {e}")
                    return False
            
            # Update Dockerfile placeholders with basic content
            stage1_dockerfile = project_dir / 'stage-1.Dockerfile'
            if stage1_dockerfile.exists():
                # Read current config to get base image
                with open(config_file, 'r') as f:
                    config = yaml.safe_load(f) or {}
                
                base_image = config.get('stage_1', {}).get('image', {}).get('base', 'ubuntu:22.04')
                
                basic_dockerfile_content = f'''# PeiDocker Stage-1 Dockerfile (Fallback Mode)
FROM {base_image}

# Basic setup - full configuration requires pei-docker-cli
RUN apt-get update && apt-get install -y \\
    curl \\
    wget \\
    vim \\
    && rm -rf /var/lib/apt/lists/*

# Note: This is a fallback Dockerfile. 
# Install pei-docker-cli and run 'pei-docker-cli configure' for full functionality.
'''
                
                stage1_dockerfile.write_text(basic_dockerfile_content)
            
            # Create basic docker-compose.yml
            compose_file = project_dir / 'docker-compose.yml'
            if not compose_file.exists():
                compose_content = f'''# PeiDocker docker-compose.yml (Fallback Mode)
version: '3.8'

services:
  stage-1:
    build:
      context: .
      dockerfile: stage-1.Dockerfile
    image: {project_dir.name}:stage-1
    
  stage-2:
    build:
      context: .
      dockerfile: stage-2.Dockerfile
    image: {project_dir.name}:stage-2
    depends_on:
      - stage-1

# Note: This is a basic docker-compose.yml. 
# Install pei-docker-cli and run 'pei-docker-cli configure' for full functionality.
'''
                compose_file.write_text(compose_content)
            
            return True
            
        except Exception as e:
            print(f"Error in fallback project configuration: {e}")
            return False
    
    def validate_project_directory(self, project_dir: Path) -> bool:
        """Validate if a directory is a valid PeiDocker project."""
        if not project_dir.exists():
            return False
        
        # Check for required files/directories
        required_items = [
            'user_config.yml',
            'installation',
            'stage-1.Dockerfile',
            'stage-2.Dockerfile'
        ]
        
        for item in required_items:
            if not (project_dir / item).exists():
                return False
        
        return True
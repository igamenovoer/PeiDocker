# CPU-only container with Miniconda and auto-managed volumes
# This example creates a CPU-only container with Miniconda pre-installed during build
# Uses automatically managed Docker volumes for persistence

stage_1:
  # Base image configuration - using standard Ubuntu
  image:
    base: ubuntu:22.04             # Ubuntu 22.04 LTS base image
    output: pei-test:stage-1       # Name of the generated stage-1 image
  
  # SSH server configuration
  ssh:
    enable: true                   # Enable SSH server in the container
    port: 22                      # SSH port inside the container
    host_port: 2222               # Port on host machine mapped to container SSH port
    
    # Define SSH users with their passwords
    users:
      me:
        password: '123456'         # Regular user for development
      root:
        password: root             # Root user for admin tasks
  
  # Package repository configuration for faster downloads
  apt:
    repo_source: tuna             # Use Tsinghua University mirror (good for China/Asia)

# Stage 2: Application layer with auto-volume storage and pre-installed Miniconda
stage_2:
  # Image configuration
  image:
    output: pei-test:stage-2      # Name of the final stage-2 image
  
  # Persistent storage configuration using auto-managed Docker volumes
  storage:
    app:                          # Directory for installed applications (including Miniconda)
      type: auto-volume           # Use automatically managed Docker volume
    data:                         # Directory for data files
      type: auto-volume           # Use automatically managed Docker volume
    workspace:                    # Directory for workspace/code
      type: auto-volume           # Use automatically managed Docker volume
  
  # Custom scripts configuration
  custom:
    on_build:                     # Scripts to run during image building
    - stage-2/system/conda/auto-install-miniconda.sh  # Install Miniconda during build

# Note: Miniconda is installed during image build for faster container startup
# CPU-only configuration suitable for general Python development
# Storage directories are accessible as:
# /soft/app -> persistent Docker volume (auto-generated name)
# /soft/data -> persistent Docker volume (auto-generated name)
# /soft/workspace -> persistent Docker volume (auto-generated name)

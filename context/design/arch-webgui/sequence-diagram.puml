@startuml PeiDocker-WebGUI-Sequence-Diagram
!theme plain
title PeiDocker WebGUI - Reactive Data Flow

actor User
participant "UI Widget" as Widget
participant "Bindable Property" as Binding
participant "UI State\n(AppUIState)" as State
participant "Other Widgets" as Others
participant "ConfigBridge" as Bridge
participant "Pydantic\nValidation" as Pydantic
participant "YAML File" as File

== Reactive UI Updates (Automatic) ==
User -> Widget: Modify input
activate Widget

Widget -> Binding: Update bound value
activate Binding
note right: NiceGUI handles\nbinding automatically

Binding -> State: Update property
activate State
State -> State: Mark modified = True

State --> Others: Notify observers
activate Others
note right: All bound widgets\nupdate automatically

Others -> Others: Re-render if needed
deactivate Others

Widget --> User: Show immediate feedback
deactivate Widget
deactivate Binding
deactivate State

== Configuration Save Flow ==
User -> Widget: Click Save
activate Widget

Widget -> Bridge: save_to_yaml(ui_state, path)
activate Bridge

Bridge -> Bridge: validate_ui_state(ui_state)
activate Bridge #LightBlue

loop For each component
    Bridge -> Pydantic: Create validation model
    activate Pydantic
    
    alt Valid data
        Pydantic --> Bridge: Return validated model
    else Validation error
        Pydantic --> Bridge: Raise ValidationError
    end
    deactivate Pydantic
end

Bridge --> Bridge: Aggregate validation results
deactivate Bridge

alt All valid
    Bridge -> Bridge: _ui_to_user_config_format()
    note right: Convert to YAML structure
    
    Bridge -> File: Write YAML
    activate File
    File --> Bridge: Success
    deactivate File
    
    Bridge -> State: mark_saved()
    State -> State: modified = False
    State -> State: last_saved = now()
    
    Bridge --> Widget: Return success
    Widget -> User: Show success notification
else Validation failed
    Bridge --> Widget: Return errors
    Widget -> User: Show error messages
end

deactivate Bridge
deactivate Widget

== Configuration Load Flow ==
User -> Widget: Load project
activate Widget

Widget -> File: Read user_config.yml
activate File
File --> Widget: YAML data
deactivate File

Widget -> Bridge: load_into_ui(yaml_data, ui_state)
activate Bridge

Bridge -> Bridge: Parse YAML structure
Bridge -> State: Update UI properties
activate State

loop For each property
    State -> Binding: Property changed
    activate Binding
    Binding --> Others: Notify observers
    activate Others
    Others -> Others: Update UI automatically
    deactivate Others
    deactivate Binding
end

State -> State: modified = False
deactivate State

Bridge --> Widget: Load complete
deactivate Bridge

Widget --> User: Show loaded project
deactivate Widget

== Real-time Binding Example ==
note over User, Others: Example: GPU Enable Checkbox

User -> Widget: Check "Enable GPU"
Widget -> State: gpu_enabled = True

State --> Others: Notify GPU config panel
activate Others
Others -> Others: bind_visibility_from()\nmakes panel visible
Others --> User: GPU options appear
deactivate Others

note right: No manual code needed!\nBinding handles everything

@enduml
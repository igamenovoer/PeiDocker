@startuml PeiDocker-WebGUI-Class-Diagram
!theme plain
title PeiDocker WebGUI - Refactored Class Architecture

' UI State Models (Bindable Dataclasses)
package "UI State Layer" #LightBlue {
    class AppUIState <<@bindable_dataclass>> {
        +project: ProjectUI
        +stage_1: StageUI
        +stage_2: StageUI
        +active_stage: int
        +modified: bool
        +last_saved: str
        +active_tab: str
        +has_errors: bool
        +error_count: int
        --
        +mark_modified()
        +mark_saved()
        +get_active_stage(): StageUI
        +merge_stages(): Dict[str, Any]
    }
    
    class ProjectUI <<@bindable_dataclass>> {
        +project_name: str
        +project_directory: str
        +description: str
        +base_image: str
        +image_output_name: str
        +template: str
    }
    
    class StageUI <<@bindable_dataclass>> {
        +environment: EnvironmentUI
        +network: NetworkUI
        +ssh: SSHTabUI
        +storage: StorageUI
        +scripts: ScriptsUI
    }
    
    class EnvironmentUI <<@bindable_dataclass>> {
        +gpu_enabled: bool
        +gpu_count: str
        +cuda_version: str
        +env_vars: Dict[str, str]
        +device_type: str
        +gpu_memory_limit: str
    }
    
    class NetworkUI <<@bindable_dataclass>> {
        +proxy_enabled: bool
        +http_proxy: str
        +https_proxy: str
        +no_proxy: str
        +apt_mirror: str
        +port_mappings: List[Dict[str, str]]
    }
}

' Validation Models (Pydantic)
package "Validation Layer" #LightGreen {
    class AppConfig <<Pydantic>> {
        +project: ProjectConfig
        +stage_1: StageConfig
        +stage_2: StageConfig
        --
        +to_user_config_yaml(): Dict[str, Any]
    }
    
    class ProjectConfig <<Pydantic>> {
        +project_name: str
        +project_directory: str
        +description: str
        +base_image: str
        +image_output_name: str
        +template: str
        --
        +validate_project_name(v: str): str
        +validate_base_image(v: str): str
    }
    
    class EnvironmentConfig <<Pydantic>> {
        +gpu_enabled: bool
        +gpu_count: str
        +cuda_version: str
        +env_vars: Dict[str, str]
        +device_type: str
        +gpu_memory_limit: str
        --
        +validate_env_vars(v: Dict): Dict
        +validate_gpu_memory(v: str): str
    }
    
    class NetworkConfig <<Pydantic>> {
        +proxy_enabled: bool
        +http_proxy: str
        +https_proxy: str
        +no_proxy: str
        +apt_mirror: str
        +port_mappings: List[Dict[str, str]]
        --
        +validate_proxy_url(v: str): str
        +validate_port_mappings(v: List): List
    }
}

' Bridge Layer
package "Bridge Layer" #LightYellow {
    class ConfigBridge {
        --
        +{static} validate_ui_state(ui_state: AppUIState): Tuple[bool, List[str]]
        +{static} save_to_yaml(ui_state: AppUIState, file_path: str): bool
        +{static} load_into_ui(config_data: Dict, ui_state: AppUIState)
        -{static} _ui_to_user_config_format(ui_state: AppUIState): Dict
        -{static} _build_storage_config(storage: StorageUI): Dict
        -{static} _build_scripts_config(scripts1, scripts2): Dict
    }
}

' Tab Components
package "Tab Components" #LightCoral {
    abstract class BaseTab {
        #app: PeiDockerWebGUI
        #container: Optional[ui.element]
        --
        +{abstract} render(): ui.element
        +{abstract} validate(): Tuple[bool, List[str]]
        +{abstract} get_config_data(): Dict
        +{abstract} set_config_data(data: Dict)
        +mark_modified()
        #create_card(title: str): ui.card
        #create_form_group(title: str, desc: str): ui.column
    }
    
    class EnvironmentTab {
        +app: PeiDockerWebGUI
        +device_type_select: ui.select
        +gpu_config_container: ui.column
        +env_variables_data: List[Dict[str, Any]]
        --
        +render(): ui.element
        +validate(): Tuple[bool, List[str]]
        +get_config_data(): Dict
        +set_config_data(data: Dict)
        +_add_env_variable()
        +_on_device_type_change()
    }
}

' Main Application
class PeiDockerWebGUI {
    +data: AppData <<legacy>>
    +tabs: Dict[TabName, BaseTab]
    --
    +setup_ui()
    +run()
    ' ... legacy methods ...
}

' Relationships
AppUIState *-- ProjectUI
AppUIState *-- StageUI : stage_1, stage_2
StageUI *-- EnvironmentUI
StageUI *-- NetworkUI

ConfigBridge ..> AppUIState : validates
ConfigBridge ..> AppConfig : creates
ConfigBridge ..> ProjectConfig : converts to
ConfigBridge ..> EnvironmentConfig : converts to

EnvironmentTab --|> BaseTab

AppConfig *-- ProjectConfig
AppConfig *-- StageConfig

' Notes
note right of AppUIState
  Single Source of Truth
  - Centralized state
  - Automatic UI sync
  - Change tracking
end note

note bottom of ConfigBridge
  Conversion Layer
  - UI State validation
  - YAML serialization
  - Error aggregation
end note

note left of EnvironmentUI
  @bindable_dataclass (Planned)
  - Two-way data binding
  - Automatic updates
  - No event handlers
end note

note right of EnvironmentTab
  Current Implementation
  - Manual event handling
  - Direct UI updates
  - Works with legacy models
end note

@enduml
@startuml PeiDocker-WebGUI-Package-Diagram
!theme plain
title PeiDocker WebGUI - Refactored Package Architecture

' Define packages
package "PeiDocker WebGUI" {
    
    package "Main Application" {
        [app.py] <<Main Controller>>
        [cli_launcher.py] <<CLI Integration>>
    }
    
    package "Models Layer" {
        package "models/" {
            [ui_state.py] <<Bindable UI State>>
            [config.py] <<Pydantic Validation>>
        }
    }
    
    package "Utils Layer" {
        package "utils/" {
            [bridge.py] <<State-Config Bridge>>
        }
    }
    
    package "Legacy Support" {
        [legacy_models.py] <<Legacy Data Models>>
        [legacy_utils.py] <<Legacy Utilities>>
    }
    
    package "Tab Components" {
        package "tabs/" {
            [base.py] <<Abstract Base>>
            package "Current Tabs" {
                [project.py]
                [ssh.py]
                [network.py]
                [environment.py]
                [storage.py]
                [scripts.py]
                [summary.py]
            }
        }
    }
}

package "External Dependencies" {
    [NiceGUI Framework] <<Reactive UI>>
    [Pydantic v2] <<Data Validation>>
    [PyYAML] <<YAML Processing>>
}

package "PeiDocker Core" {
    [pei-docker-cli] <<CLI Commands>>
    [user_config.yml] <<Configuration>>
}

' Define relationships
[app.py] --> [legacy_models.py] : temporary
[app.py] --> [base.py] : coordinates
[app.py] --> [NiceGUI Framework] : built on

[ui_state.py] --> [NiceGUI Framework] : @bindable_dataclass
[config.py] --> [Pydantic v2] : BaseModel

[bridge.py] --> [ui_state.py] : converts from
[bridge.py] --> [config.py] : validates with
[bridge.py] --> [PyYAML] : serializes

[Current Tabs] --> [legacy_models.py] : uses
[Current Tabs] --> [base.py] : extends

[cli_launcher.py] --> [app.py] : launches
[bridge.py] --> [user_config.yml] : reads/writes

note right of [ui_state.py]
  Reactive State Layer
  - @bindable_dataclass
  - Automatic UI sync
  - Single source of truth
  - No event handlers
end note

note bottom of [bridge.py]
  Bridge Pattern
  - UI State â†” Pydantic
  - YAML serialization
  - Validation orchestration
  - Error handling
end note

note left of [config.py]
  Validation Layer
  - Field validators
  - Type coercion
  - Pattern matching
  - Error messages
end note

@enduml